# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import gogo_pb2
from . import api_pb2


class RegistrationBase(abc.ABC):

    @abc.abstractmethod
    async def Register(self, stream: 'grpclib.server.Stream[api_pb2.RegisterRequest, api_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/v1beta1.Registration/Register': grpclib.const.Handler(
                self.Register,
                grpclib.const.Cardinality.UNARY_UNARY,
                api_pb2.RegisterRequest,
                api_pb2.Empty,
            ),
        }


class RegistrationStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Register = grpclib.client.UnaryUnaryMethod(
            channel,
            '/v1beta1.Registration/Register',
            api_pb2.RegisterRequest,
            api_pb2.Empty,
        )


class DevicePluginBase(abc.ABC):

    @abc.abstractmethod
    async def GetDevicePluginOptions(self, stream: 'grpclib.server.Stream[api_pb2.Empty, api_pb2.DevicePluginOptions]') -> None:
        pass

    @abc.abstractmethod
    async def ListAndWatch(self, stream: 'grpclib.server.Stream[api_pb2.Empty, api_pb2.ListAndWatchResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Allocate(self, stream: 'grpclib.server.Stream[api_pb2.AllocateRequest, api_pb2.AllocateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PreStartContainer(self, stream: 'grpclib.server.Stream[api_pb2.PreStartContainerRequest, api_pb2.PreStartContainerResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/v1beta1.DevicePlugin/GetDevicePluginOptions': grpclib.const.Handler(
                self.GetDevicePluginOptions,
                grpclib.const.Cardinality.UNARY_UNARY,
                api_pb2.Empty,
                api_pb2.DevicePluginOptions,
            ),
            '/v1beta1.DevicePlugin/ListAndWatch': grpclib.const.Handler(
                self.ListAndWatch,
                grpclib.const.Cardinality.UNARY_STREAM,
                api_pb2.Empty,
                api_pb2.ListAndWatchResponse,
            ),
            '/v1beta1.DevicePlugin/Allocate': grpclib.const.Handler(
                self.Allocate,
                grpclib.const.Cardinality.UNARY_UNARY,
                api_pb2.AllocateRequest,
                api_pb2.AllocateResponse,
            ),
            '/v1beta1.DevicePlugin/PreStartContainer': grpclib.const.Handler(
                self.PreStartContainer,
                grpclib.const.Cardinality.UNARY_UNARY,
                api_pb2.PreStartContainerRequest,
                api_pb2.PreStartContainerResponse,
            ),
        }


class DevicePluginStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetDevicePluginOptions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/v1beta1.DevicePlugin/GetDevicePluginOptions',
            api_pb2.Empty,
            api_pb2.DevicePluginOptions,
        )
        self.ListAndWatch = grpclib.client.UnaryStreamMethod(
            channel,
            '/v1beta1.DevicePlugin/ListAndWatch',
            api_pb2.Empty,
            api_pb2.ListAndWatchResponse,
        )
        self.Allocate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/v1beta1.DevicePlugin/Allocate',
            api_pb2.AllocateRequest,
            api_pb2.AllocateResponse,
        )
        self.PreStartContainer = grpclib.client.UnaryUnaryMethod(
            channel,
            '/v1beta1.DevicePlugin/PreStartContainer',
            api_pb2.PreStartContainerRequest,
            api_pb2.PreStartContainerResponse,
        )
